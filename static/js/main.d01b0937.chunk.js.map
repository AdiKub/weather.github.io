{"version":3,"sources":["store/main/actionTypes.js","store/main/selectors.js","store/main/reducers.js","api/index.js","store/main/actions.js","store/main/sagas.js","store/index.js","components/CurrentAdditionalWeather/index.js","components/CurrentMainWeather/index.js","components/OtherTimeWeather/index.js","components/TodayWeather/index.js","container/TodayWeatherContainer/index.js","components/OtherDaysWeathers/index.js","container/OtherDaysWeathersContainer/index.js","components/MapMarker/index.js","components/WeatherMap/index.js","container/WeatherMapContainer/index.js","components/LocationSearchInput/index.js","container/LocationSearchInputContainer/index.js","components/WeatherTitleWithForm/index.js","container/WeatherTitleWithFormContainer/index.js","pages/Home.js","App.js","index.js"],"names":["GET_WEATHER_START","initialState","currentWeatherStore","futureWeatherStore","currentWeatherFailureStore","futureWeatherFailureStore","main","state","action","type","Object","assign","currentWeather","futureWeather","currentWeatherFailure","futureWeatherFailure","currentWeatherRequest","coords","axios","get","lat","lon","process","then","response","data","catch","error","futureWeatherRequest","getWeatherStart","getCurrentWeather","getFutureWeather","getCurrentWeatherFailure","getFutureWeatherFailure","createCurrentWeather","createFutureWeather","watchCreateCurrentWeather","watchCreateFutureWeather","call","api","put","actions","take","actionTypes","fork","sagaMiddleware","createSagaMiddleware","logger","createLogger","level","duration","collapsed","store","createStore","mainReducer","applyMiddleware","run","mainSaga","CurrentAdditionalWeather","props","sunrise","moment","sys","format","sunset","className","wind","speed","clouds","all","weather","description","pressure","humidity","CurrentMainWeather","date","dt","time","weatherIcon","icon","Math","floor","temp","src","alt","OtherTimeWeather","weatherCurrentDate","hours","Date","getHours","todayDateNumber","getDate","otherDateNumber","wIcon","TodayWeather","list","length","CW","FW","currentHours","arrGenerator","map","weatherindex","key","connect","OtherDaysWeathers","otherDayWeather","todayDate","otherDate","otherHours","push","slice","otherTime","MapMarker","style","cursor","WeatherMap","getWeatherStartAction","useEffect","navigator","geolocation","getCurrentPosition","getPositionWeather","position","latitude","longitude","bootstrapURLKeys","defaultCenter","lng","center","coord","defaultZoom","onClick","e","dispatch","LocationSearchInput","useState","inputValue","onInput","Geocode","setApiKey","value","onChange","address","onSelect","fromAddress","results","geometry","location","console","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","suggestion","active","padding","backgroundColor","color","WeatherTitleWithForm","name","country","getName","getCurrentWeatherAction","Home","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d01b0937.chunk.js","sourcesContent":["export const GET_WEATHER_START = 'GET_WEATHER_START';\nexport const GET_CURRENT_WEATHER_SUCCESS = 'GET_CURRENT_WEATHER_SUCCESS';\nexport const GET_CURRENT_WEATHER_FAILED = 'GET_CURRENT_WEATHER_FAILED';\nexport const GET_FUTURE_WEATHER_SUCCESS = 'GET_FUTURE_WEATHER_SUCCESS';\nexport const GET_FUTURE_WEATHER_FAILED = 'GET_FUTURE_WEATHER_FAILED';","export const initialState = {\n    currentWeatherStore: {\n      \"coord\": {\n        \"lon\": 74.61,\n        \"lat\": 42.88\n      },\n      \"weather\": [\n        {\n          \"id\": \"\",\n          \"main\": \"\",\n          \"description\": \"\",\n          \"icon\": \"01d\"\n        }\n      ],\n      \"base\": \"\",\n      \"main\": {\n        \"temp\": 273\n      },\n      \"visibility\": 0,\n      \"wind\": {\n      },\n      \"clouds\": {\n      },\n      \"dt\": 0,\n      \"sys\": {\n      },\n      \"timezone\": 0,\n      \"id\": 0,\n      \"name\": \"\"\n    },\n    futureWeatherStore: {\n      \"cnt\": 40,\n      \"list\": [],\n      \"city\": {\n        \"id\": 1528675,\n        \"name\": \"Bishkek\",\n        \"coord\": {\n          \"lat\": 42.8767,\n          \"lon\": 74.607\n        },\n        \"country\": \"KG\",\n        \"population\": 0,\n        \"timezone\": 0,\n        \"sunrise\": 0,\n        \"sunset\": 0\n      }\n    },\n    currentWeatherFailureStore: {},\n    futureWeatherFailureStore: {}\n  };\n  \nexport const getState = (state = initialState) => state || initialState;","import { GET_CURRENT_WEATHER_SUCCESS, GET_FUTURE_WEATHER_SUCCESS, GET_FUTURE_WEATHER_FAILED, GET_CURRENT_WEATHER_FAILED } from './actionTypes';\nimport { initialState } from './selectors';\n\nconst main = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_CURRENT_WEATHER_SUCCESS:\n      return Object.assign({}, state, {\n        currentWeatherStore: action.currentWeather\n      })\n    case GET_FUTURE_WEATHER_SUCCESS:\n      return Object.assign({}, state, {\n        futureWeatherStore: action.futureWeather\n      })\n    case GET_CURRENT_WEATHER_FAILED:\n      return Object.assign({}, state, {\n        currentWeatherFailureStore: action.currentWeatherFailure\n      })\n    case GET_FUTURE_WEATHER_FAILED:\n      return Object.assign({}, state, {\n        futureWeatherFailureStore: action.futureWeatherFailure\n      })\n    default:\n      return state\n  }\n};\n\nexport default main;","import axios from 'axios';\n\nconst WEATHER_API_KEY = process.env.REACT_APP_OPENWEATHER_API_KEY;\n\nexport const currentWeatherRequest = (coords) => {\n  return axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${coords.lat}&lon=${coords.lon}&APPID=${WEATHER_API_KEY}`)\n    .then(response => response.data)\n    .catch(error => false);\n};    \n\nexport const futureWeatherRequest = (coords) => {\n   return axios.get(`https://api.openweathermap.org/data/2.5/forecast?lat=${coords.lat}&lon=${coords.lon}&APPID=${WEATHER_API_KEY}`)\n    .then(response => response.data)\n    .catch(error => false);\n};","import {\n  GET_WEATHER_START,\n  GET_CURRENT_WEATHER_SUCCESS,\n  GET_CURRENT_WEATHER_FAILED,\n  GET_FUTURE_WEATHER_SUCCESS,\n  GET_FUTURE_WEATHER_FAILED\n} from './actionTypes';\n\nexport const getWeatherStart = coords => ({\n  type: GET_WEATHER_START,\n  coords,\n});\n\nexport const getCurrentWeather = (currentWeather)=> {\n  return {\n    type: GET_CURRENT_WEATHER_SUCCESS,\n    currentWeather\n  }\n};\n\nexport const getFutureWeather = (futureWeather) => {\n  return {\n    type: GET_FUTURE_WEATHER_SUCCESS,\n    futureWeather\n  }\n};\n\nexport const getCurrentWeatherFailure = (currentWeatherFailure) => {\n  return {\n    type: GET_CURRENT_WEATHER_FAILED,\n    currentWeatherFailure\n  }\n};\n\nexport const getFutureWeatherFailure = (futureWeatherFailure) => {\n  return {\n    type: GET_FUTURE_WEATHER_FAILED,\n    futureWeatherFailure\n  }\n};","import {\n    take, put, call, fork,\n  } from 'redux-saga/effects';\n  import * as api from '../../api';\n  import * as actions from './actions';\n  import * as actionTypes from './actionTypes';\n  \n  \n  export function* createCurrentWeather(coords) {\n    const response = yield call(api.currentWeatherRequest,  coords);\n    if (response)\n    yield put(actions.getCurrentWeather(response));\n    else\n    yield put(actions.getCurrentWeatherFailure(response));\n  }\n  \n  export function* createFutureWeather(coords) {\n    const response = yield call(api.futureWeatherRequest,  coords);\n    if (response)\n    yield put(actions.getFutureWeather(response));\n    else\n    yield put(actions.getFutureWeatherFailure(response));\n  }\n     \n  export function* watchCreateCurrentWeather() {\n    while (true) {\n      const { coords } = yield take(actionTypes.GET_WEATHER_START);\n      yield call(createCurrentWeather, coords);\n    }\n  }\n  \n  export function* watchCreateFutureWeather() {\n    while (true) {\n      const { coords } = yield take(actionTypes.GET_WEATHER_START);\n      yield call(createFutureWeather, coords);\n    }\n  }\n  \n  export default function* () {\n    yield fork(watchCreateCurrentWeather);\n    yield fork(watchCreateFutureWeather);\n  }","\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga'\nimport { createLogger } from 'redux-logger'\nimport mainReducer from './main/reducers';\nimport mainSaga from './main/sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst logger = createLogger({\n  level: 'info',\n  duration: true,\n  collapsed: true,\n})\n\nconst store = createStore(\n  mainReducer,\n  applyMiddleware(\n    sagaMiddleware,\n    logger,\n  )\n);\n\nsagaMiddleware.run(mainSaga);\n\nexport default store","import React from 'react';\nimport moment from 'moment'\n\nimport './styles.scss';\n\nconst CurrentAdditionalWeather = (props) => {\n  const { currentWeatherStore } = props;\n  const sunrise = moment(currentWeatherStore.sys.sunrise * 1000).format('HH:mm');\n  const sunset = moment(currentWeatherStore.sys.sunset * 1000).format('HH:mm');\n\n  return (\n    <div className='current-additional-weather'>\n      <div className='current-additional-weather-list'>\n        <span className='current-additional-weather-list_name'>\n          Wind:\n        </span>\n        <span className='current-additional-weather-list_item'>\n          {currentWeatherStore.wind.speed} m/s\n        </span>\n      </div>\n      <div className='current-additional-weather-list'>\n        <span className='current-additional-weather-list_name'>\n          Cloudiness:\n        </span>\n        <span className='current-additional-weather-list_item'>\n          {currentWeatherStore.clouds.all} %  {currentWeatherStore.weather[0].description}\n        </span>\n      </div>\n      <div className='current-additional-weather-list'>\n        <span className='current-additional-weather-list_name'>\n          Pressure:\n        </span>\n        <span className='current-additional-weather-list_item'>\n          {currentWeatherStore.main.pressure} hpa\n        </span>\n      </div>\n      <div className='current-additional-weather-list'>\n        <span className='current-additional-weather-list_name'>\n          Humidity:\n        </span>\n        <span className='current-additional-weather-list_item'>\n          {currentWeatherStore.main.humidity} %\n        </span>\n      </div>\n      <div className='current-additional-weather-list'>\n        <span className='current-additional-weather-list_name'>\n          Sunrise:\n        </span>\n        <span className='current-additional-weather-list_item'>\n          {sunrise}\n        </span>\n      </div>\n      <div className='current-additional-weather-list'>\n        <span className='current-additional-weather-list_name'>\n          Sunset:\n        </span>\n        <span className='current-additional-weather-list_item'>\n          {sunset}\n        </span>\n      </div>\n    </div>\n  )\n}\nexport default CurrentAdditionalWeather;\n","import React from 'react';\nimport moment from 'moment'\nimport './styles.scss';\n\nconst CurrentMainWeather = (props) => {\n  const { currentWeatherStore } = props;\n  const date = moment(currentWeatherStore.dt * 1000).format('Do MMM YY');\n  const time = moment(currentWeatherStore.dt * 1000).format('ddd HH:mm');\n  const weatherIcon = `http://openweathermap.org/img/wn/${currentWeatherStore.weather[0].icon}@2x.png`;\n\n  return (\n    <div className='current-main-weather'>\n      <div className='current-main-weather-info'>\n        <span> {date} </span>\n        <span> {time} </span>\n        <h4 className='current-main-weather-info_degree'>\n          {Math.floor(currentWeatherStore.main.temp - 273)}c\n          </h4>\n        <span className='current-main-weather-info_description' >\n          {currentWeatherStore.weather[0].description}\n        </span>\n      </div>\n      <img\n        className='current-main-weather-icon'\n        src={weatherIcon}\n        alt='icon' />\n    </div>\n  )\n}\n\nexport default CurrentMainWeather;","import React from 'react';\nimport moment from 'moment'\nimport './styles.scss';\n\nconst OtherTimeWeather = (props) => {\n  const { weather } = props;\n\n  const weatherCurrentDate = moment(weather.dt*1000).format('ddd Do MMM');\n  const hours = new Date(weather.dt*1000).getHours();\n  const todayDateNumber = new Date().getDate();\n  const otherDateNumber = new Date(weather.dt*1000).getDate();\n  const time = moment(weather.dt*1000).format('HH:mm');\n  const temp = Math.floor(weather.main.temp - 273)\n  const wind = weather.wind.speed\n  const pressure = weather.main.pressure\n  const wIcon = `http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`;\n\n  return (\n    <div  className='other-time-weather'>\n      <span className='other-time-weather-text'> {weatherCurrentDate} </span>\n      <span className='other-time-weather-text'> \n      {todayDateNumber === otherDateNumber ?     // displays time for today or \"night\"/\"day\" for otherdays  \n        time : \n        (hours === 21 ? 'night':'day')} \n      </span>\n        <img\n          alt='icon'\n          src={wIcon} \n          className='other-time-weather_icon'/>\n      <span className='other-time-weather-text'> {temp} c </span>\n      <span className='other-time-weather-text'> {wind} m/s </span>\n      <span className='other-time-weather-text'> {pressure} hpa </span>\n    </div>\n  )\n}\n\nexport default OtherTimeWeather;","import React from 'react';\n\nimport CurrentAdditionalWeather from \"../CurrentAdditionalWeather\";\nimport CurrentMainWeather from \"../CurrentMainWeather\";\nimport OtherTimeWeather from \"../OtherTimeWeather\";\nimport './styles.scss';\n\nconst TodayWeather = (props) => {\n  const { currentWeatherStore, futureWeatherStore } = props;\n  \n  const arrGenerator = (CW, FW) => {             // generates array for display 2 or 3 different weather time for a current date which takes from array futureWeatherStore.list. \n    const currentHours = new Date(CW.dt*1000).getHours();\n    const otherHours = new Date(FW.list[0].dt*1000).getHours();\n    const difference = otherHours - currentHours;\n    let arr = ''\n    difference < 2 ? arr = [1, 2] : arr = [0, 1, 2]\n    return arr\n  }\n\n  return (\n    <div className='today-weather'>\n      <div className='container'>\n        <div className='today-weather-wrapper'>\n          <div className='today-weather-current'>\n            <CurrentMainWeather currentWeatherStore={currentWeatherStore} />\n            <CurrentAdditionalWeather currentWeatherStore={currentWeatherStore} />\n          </div>\n          <div className='today-weather-other-time'>\n            {futureWeatherStore.list.length > 0 && \n              arrGenerator(currentWeatherStore, futureWeatherStore)\n              .map(weatherindex =>\n                <OtherTimeWeather\n                  key={futureWeatherStore.list[weatherindex].dt}\n                  weather={futureWeatherStore.list[weatherindex]} \n                />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default TodayWeather;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport TodayWeather from '../../components/TodayWeather';\n\nconst TodayWeatherContainer = props => <TodayWeather {...props} />;\n\nconst mapStateToProps = store => ({\n  currentWeatherStore: store.currentWeatherStore,\n  futureWeatherStore: store.futureWeatherStore,\n});\n\nexport default connect(mapStateToProps, null)(TodayWeatherContainer);","import React from 'react';\n\nimport OtherTimeWeather from \"../OtherTimeWeather\";\nimport './styles.scss';\n\nconst OtherDaysWeathers = (props) => {\n  const { futureWeatherStore } = props;\n  const otherDayWeather = [];\n\n  futureWeatherStore.list.length > 0 && futureWeatherStore.list.map((weather)=> { // collects weathers as day/night for other days.\n    const todayDate = new Date().getDate();\n    const otherDate = new Date(weather.dt*1000).getDate();\n    const otherHours = new Date(weather.dt*1000).getHours();\n    // eslint-disable-next-line no-mixed-operators\n    if (todayDate !== otherDate && (otherHours === 15 || otherHours === 21)){   \n        otherDayWeather.push(weather)\n    }\n    return otherDayWeather\n  });\n\n  return (\n    <div className='other-days-weathers'>\n      <div className='container'>\n        <div className='other-days-weathers-wrapper'>\n          {otherDayWeather.slice(0, 8).map(otherTime=>(\n            <OtherTimeWeather \n              key={otherTime.dt} \n              weather={otherTime}/>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default OtherDaysWeathers;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport OtherDaysWeathers from '../../components/OtherDaysWeathers';\n\nconst OtherDaysWeathersContainer = props => <OtherDaysWeathers {...props} />;\n\nconst mapStateToProps = store => ({\n  futureWeatherStore: store.futureWeatherStore,\n});\n\nexport default connect(mapStateToProps, null)(OtherDaysWeathersContainer);","import React from 'react';\n\nimport './styles.scss';\n\nconst MapMarker = () => {\n  return (\n    <div>\n      <div\n        className=\"pin bounce\"\n        style={{ cursor: 'pointer' }}\n      />\n      <div className=\"pulse\" />\n    </div>\n  );\n};\n\nexport default MapMarker;","import React, { useEffect } from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nimport MapMarker from '../MapMarker';\nimport './styles.scss';\n\nconst WeatherMap = (props) => {\n  const { getWeatherStartAction, currentWeatherStore } = props;\n  const MAP_KEY = process.env.REACT_APP_GOOGLE_MAP_KEY;\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(getPositionWeather)\n  }, []);\n\n  const getPositionWeather = (position) => {   // makes a request with current place position coordinates\n    const coords = {\n      lat: position.coords.latitude,\n      lon: position.coords.longitude\n    };\n    getWeatherStartAction(coords)\n  };\n\n  return (\n    <div className='weather-map'>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: MAP_KEY }}\n        defaultCenter={{\n          lat: 42.85,\n          lng: 74.59,\n        }}\n        center={{\n          lat: currentWeatherStore.coord.lat,\n          lng: currentWeatherStore.coord.lon,\n        }}\n        defaultZoom={10}\n        onClick={(e) => getWeatherStartAction({ lat: e.lat, lon: e.lng })}\n      >\n        <MapMarker\n          lat={currentWeatherStore.coord.lat}\n          lng={currentWeatherStore.coord.lon}\n        />\n      </GoogleMapReact> :\n      <div>\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherMap;","import React from 'react';\nimport { connect } from 'react-redux';\nimport {  getWeatherStart } from '../../store/main/actions';\n\nimport WeatherMap from '../../components/WeatherMap';\n\nconst WeatherMapContainer = props => <WeatherMap {...props} />;\n\nconst mapStateToProps = store => ({\n  currentWeatherStore: store.currentWeatherStore,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getWeatherStartAction: (coords = {}) => dispatch(getWeatherStart(coords)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherMapContainer);","import React, { useState } from 'react';\nimport PlacesAutocomplete from 'reactjs-places-autocomplete';\nimport Geocode from \"react-geocode\";\n\nimport './styles.scss';\n\nconst LocationSearchInput = (props) => {\n  const { getWeatherStartAction } = props;\n  const [inputValue, onInput] = useState('');\n  const MAP_KEY = process.env.REACT_APP_GOOGLE_MAP_KEY;\n  Geocode.setApiKey(MAP_KEY);\n\n  const handleChange = address => {      // sets input value to useState\n    onInput(address)\n  };\n\n  const handleSelect = address => {      // makes request when some place selects\n    Geocode.fromAddress(address)         // placeAutocomplete for looking for input-place from global location list\n      .then(\n        response => {\n          const coords = {\n            lat: response.results[0].geometry.location.lat,\n            lon: response.results[0].geometry.location.lng\n          };\n          getWeatherStartAction(coords)    // action for request\n        },\n        error => {\n          console.error(error);\n        }\n      );\n  };\n\n  return (\n    <PlacesAutocomplete\n      value={inputValue}\n      onChange={handleChange}\n      onSelect={handleSelect}\n    >\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <div>\n          <input\n            {...getInputProps({\n              placeholder: 'Search Places ...',\n              className: 'weather-title-form_input',\n              type: 'text'\n            })}\n          />\n          <div className=\"autocomplete-dropdown-container\">\n            {suggestions.map(suggestion => {\n              const className = suggestion.active\n                ? 'suggestion-item--active'\n                : 'suggestion-item';\n              const style = suggestion.active\n                ? { padding: '5px 10px', backgroundColor: '#2b616698', cursor: 'pointer', color: '#ffffff' }\n                : { padding: '5px 10px', backgroundColor: '#ffffff', cursor: 'pointer' };\n              return (\n                <div {...getSuggestionItemProps(suggestion, {\n                  className,\n                  style\n                })}\n                >\n                  <span>{suggestion.description}</span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </PlacesAutocomplete>\n  )\n}\nexport default LocationSearchInput","import React from 'react';\nimport { connect } from 'react-redux';\nimport {  getWeatherStart } from '../../store/main/actions';\n\nimport LocationSearchInput from '../../components/LocationSearchInput';\n\nconst LocationSearchInputContainer = props => <LocationSearchInput {...props} />;\n\nconst mapDispatchToProps = dispatch => ({\n  getWeatherStartAction: (coords = {}) => dispatch(getWeatherStart(coords)),\n});\n\nexport default connect(null, mapDispatchToProps)(LocationSearchInputContainer);","import React from 'react';\nimport { getName } from 'country-list';\n\nimport LocationSearchInputContainer from '../../container/LocationSearchInputContainer';\n\nimport './styles.scss';\n\nconst WeatherTitleWithForm = (props) => {\n  const { currentWeatherStore } = props;\n\n  return (\n    <div className='weather-title'>\n      <div className='container'>\n        <div className='weather-title-wrapper'>\n          <h2 className='weather-title_text'>\n            {currentWeatherStore.name + ' '}\n            {currentWeatherStore.sys.country ? // getName() always needs some value so we should use condition\n              getName(currentWeatherStore.sys.country) : ''}\n          </h2> \n          <div className='weather-title-form'>\n          <LocationSearchInputContainer/>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default WeatherTitleWithForm;","import React from 'react';\nimport { connect } from 'react-redux';\nimport {  getCurrentWeather } from '../../store/main/actions';\n\nimport WeatherTitleWithForm from '../../components/WeatherTitleWithForm';\n\nconst WeatherTitleWithFormContainer = props => <WeatherTitleWithForm {...props} />;\n\nconst mapStateToProps = store => ({\n  currentWeatherStore: store.currentWeatherStore,\n  futureWeatherStore: store.futureWeatherStore,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCurrentWeatherAction: (coords = '') => dispatch(getCurrentWeather(coords)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherTitleWithFormContainer);","import React from 'react'\n\nimport TodayWeatherContainer from \"../container/TodayWeatherContainer\";\nimport OtherDaysWeathersContainer from \"../container/OtherDaysWeathersContainer\";\nimport WeatherMapContainer from \"../container/WeatherMapContainer\";\nimport WeatherTitleWithFormContainer from \"../container/WeatherTitleWithFormContainer\";\nimport '../assets/main.scss'\n\nconst Home = () => {\n  return (\n    <div className='weather-detail'>\n    <WeatherTitleWithFormContainer/>\n    <TodayWeatherContainer/>\n    <WeatherMapContainer/>\n    <OtherDaysWeathersContainer/>\n  </div>\n  )\n};\n\nexport default Home","import React from 'react';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\nimport Home from './pages/Home'\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Home/>\n    </Provider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}